#!/bin/bash

set -e
set -u
#set -o pipefail

echo "" >.env
_usage(){
  APP=$(basename "$0")
      echo
      echo "Usage: $APP [options] <action[start|stop|test|build> <enviorment[addons|test|prod|dev>"

      echo "    Special options:"
      echo
      echo "      -i           load an specific image"
      echo "      -a           load local linkaform_api as volume"
      echo "      -r           relaod, alway need to be at the end of the options"
      echo "      -c           works on build command, it runs the build command with no-cache"
      echo "      -p           works on build command, upload and publish image after build"
      echo "      -h           help!!!!"
      echo
      echo "    Acction & Enviorment"
      echo "      $APP <start|stop> addons     Starts the addons development environment"
      echo "      $APP <start|stop> test       Starts the testing environment"
      echo "      $APP build <base|dev|local|prod>      Starts the testing environment"
      echo "      $APP restart <preprod|prod> <account_id>  [depricated] use update"
      echo "      $APP update <preprod|prod> <account_id>  Update a given account addons containers image on given environment"
      echo "      $APP test                    Runs all tests"
      echo
      echo
      exit 1
}


API_VOL=0
IMAGE_NAME=0
SHIFT=-1
NOCACHE=0
UPLOAD=0
while getopts ':iar:ir:c:p:h' opt; do
  case "$opt" in
    a)
      echo "Loding local API..."
      if [ "$IMAGE_NAME" != "0" ]; then
        SHIFT=0
      else
        SHIFT=-1
      fi
      API_VOL=1
      ;;
    i)
      echo "Setting image..."
      SHIFT=-0
      IMAGE_NAME=$2
      ;;
    c)
      echo "No-Cache build"
      SHIFT=-2
      NOCACHE=1
      ;;
    p)
      echo "Upload image after build"
      SHIFT=-2
      UPLOAD=1
      ;;
    r)
      echo "Relaoding..."
      SHIFT=-1
      if [ "$IMAGE_NAME" != "0" ]; then
        CONTAINER_NAME=$3
      else  
        CONTAINER_NAME=$2
        SHIFT=-2
      fi
      if [[ $CONTAINER_NAME == 'test' ]]; then
        docker stop lkf_test && docker rm lkf_test
      else
        docker stop lkf-addons && docker rm lkf-addons
      fi
      ;;
    h)
     #help
      echo "helpppp"
      _usage
      ;;
    ?)
      _usage
      ;;
  esac
done


if [ "$IMAGE_NAME" != "0" ]; then
  if [[ $# -ge 2 ]]; then
    shift "$(($OPTIND $SHIFT))"
  fi
else
  if [ $# -ge 2 ]; then
    shift "$(($OPTIND $SHIFT))"
  fi
  IMAGE_NAME="linkaform/addons:develop"
fi


_run_addons(){
  echo "the command for was " $1
  case $1 in
    stop)
      docker stop lkf-addons && docker rm lkf-addons
    ;;
    start)
      containerID=$(docker ps | grep lkf-addons | awk '{print $1}')
      echo "container ID" $containerID
      if [ -z "$containerID" ]; then
        echo "creating new container"
        docker stop lkf-addons && docker rm lkf-addons
        if [[ $2 == 0 ]] ; then
          echo 'arranca'
          cd docker
          docker compose up -d lkf-addons && \
          docker exec -it lkf-addons bash
        else
          echo "Loading local addons"
          cd docker
          docker compose up -d lkf-addons && \
          docker exec -it lkf-addons bash
        fi
      else
        echo "Joinign existing"
        docker exec -it $containerID bash ;
      fi
     ;;
  esac

}

_start_addons(){
  echo "the command for was " $1
  case $1 in
    test)
      cd test/docker
      containerID=$(docker ps | grep lkf-test | awk '{print $1}')
      if [ -z "$containerID" ]; then
        echo "creating new TEST container" 
        docker stop lkf-test && docker rm lkf-test
        docker compose up -d lkf-test && \
        docker exec -it lkf-test bash
      else
        echo "Joinign existing TEST container... "
        echo "Happy testing ;)"
        docker exec -it $containerID bash ;
        fi
    ;;
    addons)
      containerID=$(docker ps | grep lkf-addons | awk '{print $1}')
      echo "container ID" $containerID
      if [ -z "$containerID" ]; then
        echo "creating new container"
        docker stop lkf-addons && docker rm lkf-addons
        if [[ $2 == 0 ]] ; then
          echo 'arranca'
          cd docker
          docker compose up -d lkf-addons && \
          docker exec -it lkf-addons bash
        else
          echo "Loading local addons"
          cd docker
          docker compose up -d lkf-addons && \
          docker exec -it lkf-addons bash
        fi
      else
        echo "Joinign existing"
        docker exec -it $containerID bash ;
      fi
     ;;
  esac

}

_build(){
  echo "Environment: " $1
  cd docker
  case $1 in
    base)
      if [ "$NOCACHE" = "1" ]; then
        docker compose build lkf-addons-base
      else
        docker compose build --no-cache lkf-addons-base
      fi
     if [ "$UPLOAD" = "1" ]; then
        docker push linkaform/addons:base
      fi  
    ;;
    dev)
      if [ "$NOCACHE" = "1" ]; then
        docker compose build --no-cache lkf-addons
      else
        docker compose build lkf-addons
      fi
     if [ "$UPLOAD" = "1" ]; then
        docker push linkaform/addons:develop
      fi  
    ;;
    local)
      if [ "$NOCACHE" = "1" ]; then
        docker compose -f docker-prod.yml build --no-cache
      else
        docker compose -f docker-prod.yml build
      fi
      for CONTAINER_ID in $(docker ps | grep addons | awk '{print $1}') 
      do
        echo 'Stopping cotainers...'
        docker stop $CONTAINER_ID && docker rm $CONTAINER_ID
      done
    ;;
    prod)
      if [ "$NOCACHE" != "0" ]; then
        docker compose -f docker-prod.yml build
      else
        docker compose -f docker-prod.yml build --no-cache
      fi
      if [ "$UPLOAD" = "1" ]; then
        docker push linkaform/addons:latest
      fi  
     ;;
  esac
  cd ..

}


_restart(){
  _update
}
_update(){
  case $Enviorment in
    prod)
      echo 'Running update...'
      ssh -i $HOME/.ssh/$Account_id _lkf_docker_remote@ansible.linkaform.com
    ;;
    preprod)
      ssh -i $HOME/.ssh/${Account_id}_preprod _lkf_docker_remote@ansible.linkaform.com
     ;;
  esac
}

_udpate_container(){
  #TODO, actualizar contenedor de addons corriendo en ambiente de pruebas
  #docker cp stock_utils.py account_9908_linkaform.addons..latest:/usr/local/lib/python3.7/site-packages/lkf_addons/addons/stock/stock_utils.py
  
  echo "TODO"
}

_run_tests(){
  echo "the command for was " $1
  cd ~/lkf/addons/test/docker
  docker stop lkf-do-test && docker rm lkf-do-test
  docker compose up lkf-do-test
}


Acction=""
if [[ $# -gt 0 ]]; then
  Acction=$1

fi

#echo $Acction >>.env

Service=0
if [[ $# -gt 1 ]]; then
  Service=$2
fi

Branch=""
if [[ $# -gt 2 ]]; then
  Branch=$3
fi

case "$Acction" in


  addons)
    echo "Addons > > > >" $API_VOL
    _run_addons $Service $API_VOL
  ;;
  start)
    echo "Addons" $API_VOL
    _start_addons $Service $API_VOL
  ;;
  build)
    echo "Building addons image" 
    _build $Service
  ;;
  restart)
    Account_id=$Branch
    Enviorment=$Service
    echo "Restarting addons container of the account: $Account_id"
    echo "Environment: $Enviorment "
    _restart $Service
  ;;
  update)
    Account_id=$Branch
    Enviorment=$Service
    echo "Restarting addons container of the account: $Account_id"
    echo "Environment: $Enviorment "
    _restart $Service
  ;;
  test)
    echo "Loding testing environment . . . . + - / * "
    _run_tests $Service
  ;;
  ?)
   _usage
   ;;
esac
